import glob
from aiogram import Router
from aiogram.filters import CommandStart, Text, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message, CallbackQuery
from telethon import TelegramClient
from telethon.tl.functions.channels import GetParticipantsRequest
from telethon.tl.types import ChannelParticipantsSearch

from cart_pars import set_default_commands
from bot_menu import menu
from config_data import config
from create_bot import bot
from database.orm import add_user, get_admin
from environs import Env

router: Router = Router()

env = Env()
env.read_env()

client = TelegramClient(env('SESSION_NAME'), env('API_ID'), env('API_HASH'))
client.start()

'''FSM –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –≥—Ä—É–ø–ø'''
class ChatOpenLink(StatesGroup):
    waiting_link = State()

'''–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø–∞—Ä—Å–∏–Ω–≥ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –≥—Ä—É–ø–ø'''
@router.callback_query(Text(startswith='parsing_open_start'))
async def parsing_open_start(callback_query: CallbackQuery, state: FSMContext):
    text = '–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞—à —á–∞—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ *t.m–µ/dur–æv* –∏–ª–∏ *@dur–æv*'
    await bot.send_message(callback_query.from_user.id, text, parse_mode='Markdown')
    await state.set_state(ChatOpenLink.waiting_link)


'''–ü–∞—Ä—Å–∏–Ω–≥ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –≥—Ä—É–ø–ø'''
@router.message(StateFilter(ChatOpenLink.waiting_link))
async def get_open_report(message: Message, state: FSMContext):
    await state.update_data(waiting_link=message.text)
    state_data = await state.get_data()
    link = state_data.get('waiting_link')
    await bot.send_message(message.chat.id, text='–ù–∞—á–∏–Ω–∞—é –ø–∞—Ä—Å–∏–Ω–≥, —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –æ—Ç 10 –¥–æ 15 –º–∏–Ω—É—Ç‚è±')
    upload_message = await bot.send_message(message.chat.id, text='–ò–¥—ë—Ç –ø–∞—Ä—Å–∏–Ω–≥: 0% [..........]')
    channel = await client.get_entity(link)
    ALL_PARTICIPANTS: list = []
    for key in config.QUERY:
        progress = (config.QUERY.index(key)+1)*100/len(config.QUERY)
        completion_percentage = float('{:.2f}'.format(progress))
        await upload_message.edit_text(text=f'–ò–¥—ë—Ç –ø–∞—Ä—Å–∏–Ω–≥: {completion_percentage}% [{"*"*(int(progress)//10)}{"."*(10-int(progress)//10)}]')
        OFFSET_USER = 0
        while True:
            participants = await client(
                GetParticipantsRequest(channel, ChannelParticipantsSearch(key), OFFSET_USER, config.LIMIT_USER,
                                       hash=0))
            if not participants.users:
                break
            ALL_PARTICIPANTS.extend(participants.users)
            OFFSET_USER += len(participants.users)
        target = '*.txt'
        file = glob.glob(target)[0]
    with open(file, "w", encoding="utf-8") as write_file:
        for participant in ALL_PARTICIPANTS:
            if participant.username != None and participant.bot == False and participant.fake == False:
                write_file.writelines(f"@{participant.username}\n")
    uniqlines = set(open(file, 'r', encoding='utf-8').readlines())
    open(file, 'w', encoding='utf-8').writelines(set(uniqlines))
    await state.finish()
    text = '–î–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ —á–∞—Ç–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –¥–µ–π—Å—Ç–≤–∏–µüëá'
    inline_markup = await menu.main_menu()
    await message.reply_document(open(file, 'rb'))
    await message.answer(text, reply_markup=inline_markup, parse_mode='Markdown')

'''–ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥'''
@router.callback_query(Text(startswith='main_menu'))
async def get_main_menu(callback_query: CallbackQuery):
    text = f'–ü—Ä–∏–≤–µ—Ç *{callback_query.from_user.first_name}*!\n' \
           f'–í–∞—à ID: {callback_query.from_user.id}\n' \
           f'–Ø –º–æ–≥—É —Å–ø–∞—Ä—Å–∏—Ç—å –ª—é–±–æ–π —á–∞—Ç\n' \
           f'–í—ã–±–µ—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –¥–µ–π—Å—Ç–≤–∏–µüëá'
    inline_markup = await menu.main_menu()
    await callback_query.message.edit_text(text, reply_markup=inline_markup, parse_mode='Markdown')


'''–ö–æ–º–∞–Ω–¥–∞ start'''
@router.message(CommandStart())
async def start_message(message: Message):
    text = f'–ü—Ä–∏–≤–µ—Ç *{message.from_user.first_name}*!\n–í–∞—à ID: {message.from_user.id}\n–Ø –º–æ–≥—É —Å–ø–∞—Ä—Å–∏—Ç—å –ª—é–±–æ–π —á–∞—Ç\n' \
           f'–í—ã–±–µ—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –¥–µ–π—Å—Ç–≤–∏–µüëá'
    inline_markup = await menu.main_menu()
    username = message.from_user.username
    response = await add_user(message.from_user.id, username) # –î–æ–∞–±–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if response == 1:  # –†–∞—Å—Å—ã–ª–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞–º –æ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –±–æ—Ç
        admins = await get_admin()
        for admin in admins:
            if username == None:
                await bot.send_message(chat_id=admin['tg_id'],
                                           text=f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <a href="tg://user?id={message.from_user.id}">@{message.from_user.first_name}</a> –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è',
                                           parse_mode='HTML')
            elif message.from_user.username != None:
                await bot.send_message(chat_id=admin['tg_id'],
                                       text=f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <a href="tg://user?id={message.from_user.id}">@{username}</a> –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è',
                                       parse_mode='HTML')
            else:
                await bot.send_message(chat_id=admin['tg_id'],
                                       text=f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <a href="tg://user?id={message.from_user.id}">@{username}</a> –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è',
                                       parse_mode='HTML')
    await message.answer(text=text, reply_markup=inline_markup, parse_mode='Markdown')
    await set_default_commands()

